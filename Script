/******************************************************************
 *  MASTER PIPELINE v 7.3.1  (2025-07-12)
 *  --------------------------------------------------------------
 *  • Blank “Problematic Task” rows treated as OK
 *  • Self-matches no longer count as duplicates
 *  • overwriteSheet protects manual columns
 *  • purgeBlankRows removes “ghost” rows in one pass
 *  • AA-AF (Extractions) and U-Z (Solutions) override blocks realign
 *  • onEdit checkbox ✓ → full name (AD→AE, X→Z)
 *  • 50 000-char truncator
 ******************************************************************/

/* ═════ GLOBAL HELPERS ═════ */
const MAX_CELL = 50000;
const truncVal = v => (typeof v === 'string' && v.length > MAX_CELL) ? v.slice(0, MAX_CELL) : v;
const truncMat = m => m.map(r => r.map(truncVal));
const trunc    = truncVal;                // alias

const canon = t=>String(t||'').trim().toLowerCase()
  .replace(/’/g,"'").replace(/[“”]/g,'"').replace(/\u2212/g,'-')
  .replace(/\xa0/g,' ').replace(/[^\w\s]/g,' ').replace(/\s+/g,' ');
const tokens=t=>canon(t).split(' ').filter(w=>w.length>=3);
const norm  =v=>{const s=String(v??'').trim(); return s&&!/^(null|n\/?a)$/i.test(s)?s:'';};
const jacc  =(A,B)=>{const a=new Set(A),b=new Set(B);const i=[...a].filter(x=>b.has(x)).length;return i/(a.size+b.size-i||1);};
const truthy=v=>v===true||v==='TRUE'||v==='true';
function cap(s){return s?s[0].toUpperCase()+s.slice(1):'';}

/* ═════ CONFIG ═════ */
const CFG = {
  /* Extractions */
  CONNECTED_SHEET   : 'All Problems in Solutions - Ext',
  PENDING_SHEET     : 'Completed Extractions',
  CLEANED_SHEET     : 'Completed Extractions - Cleaned',
  AUDIT_RAW_SHEET   : 'Completed Extractions -> Audit (RAW)',
  AUDIT_VIEW_SHEET  : 'Completed Extractions -> Audit for delivery',
  SOLN_SHEET        : 'Completed Extractions -> Solutions',
  HOLD_SHEET        : 'Completed Extractions -> Holding',

  /* Solutions */
  SOL_PENDING_SHEET : 'Approved and Completed Solutions - Ext',
  SOL_ALL_SHEET     : 'Delivered Solutions - Ext',
  SOL_CLEANED_SHEET : 'Approved and Completed Solutions - Cleaned',
  SOL_AUDIT_SHEET   : 'Clean Solutions Audit',
  SOL_PAUSE_SHEET   : 'Solutions -> Pause',

  /* Shared */
  TEXT_COL      : 'problem',
  SIM_THRESHOLD : 0.90
};

/* ═════ MENU & REFRESH ═════ */
function onOpen(){
  SpreadsheetApp.getUi()
    .createMenu('Task Tools')
    .addItem('Run Completed Extractions Pipeline','runAllExtractions')
    .addItem('Run Approved & Completed Solutions Pipeline','runSolutions')
    .addToUi();
}
function refreshConnectedData(){
  SpreadsheetApp.enableBigQueryExecution();
  SpreadsheetApp.getActiveSpreadsheet().refreshAllDataSources();
  SpreadsheetApp.flush();
}

/* ═════ SHEET IO HELPERS ═════ */
function overwriteSheet(ss,name,headers,rows){
  const sh=ss.getSheetByName(name)||ss.insertSheet(name);
  const hid=sh.isSheetHidden();

  let owned=headers.length;
  if(name===CFG.AUDIT_VIEW_SHEET) owned=25; // A-Y
  if(name===CFG.SOL_AUDIT_SHEET)  owned=20; // A-T

  if(sh.getLastRow()>1) sh.getRange(2,1,sh.getLastRow()-1,owned).clearContent();
  sh.getRange(1,1,1,headers.length).setValues([truncMat([headers])[0]]);

  if(rows.length){
    const trim=rows.map(r=>r.slice(0,owned));
    sh.getRange(2,1,trim.length,owned).setValues(truncMat(trim));
  }else sh.getRange(2,1).setValue('No rows');

  sh.setFrozenRows(1);
  if(hid) sh.hideSheet();
}
function writeRaw(ss,n,h,r){
  const raw=ss.getSheetByName(n)||ss.insertSheet(n);
  raw.clearContents();
  if(r.length){
    raw.getRange(1,1,1,h.length).setValues([truncMat([h])[0]]);
    raw.getRange(2,1,r.length,h.length).setValues(truncMat(r));
  }
  raw.hideSheet();
}
function purgeBlankRows(sheet,keyCol=1){
  const sh=SpreadsheetApp.getActive().getSheetByName(sheet); if(!sh) return;
  const n=sh.getLastRow()-1; if(n<1) return;
  const blanks=[]; sh.getRange(2,keyCol,n).getValues().forEach((v,i)=>{if(String(v[0]).trim()==='')blanks.push(i+2);});
  if(blanks.length) sh.deleteRows(blanks[0], blanks.length);
}
function loadCorpus(sh,id1,id2,txt){
  const V=sh.getDataRange().getValues(),H=V[0];
  const i1=H.indexOf(id1), i2=H.indexOf(id2), it=H.indexOf(txt);
  return V.slice(1).map(r=>({id1:norm(r[i1]),id2:norm(r[i2]),tok:tokens(canon(r[it]))}));
}

/* ═════ PIPELINE 1 — COMPLETED EXTRACTIONS ═════ */
function runAllExtractions(){
  refreshConnectedData();
  cleanCompletedExtracts();
  purgeBlankRows(CFG.AUDIT_VIEW_SHEET);
  syncOverrides();
  SpreadsheetApp.getUi().alert('✅ Completed Extractions pipeline complete!');
}
function cleanCompletedExtracts(){
  const ss=SpreadsheetApp.getActive();
  const corpus=loadCorpus(ss.getSheetByName(CFG.CONNECTED_SHEET),
                          'original_task_id','problem_id',CFG.TEXT_COL);
  const ids=new Set(corpus.flatMap(c=>[c.id1,c.id2]).filter(Boolean));
  const tok=corpus.map(c=>c.tok);

  const pSh=ss.getSheetByName(CFG.PENDING_SHEET);
  const V=pSh.getDataRange().getValues(), H=V[0], R=V.slice(1);
  const ix={task:H.indexOf('task_id'), pid:H.indexOf('problem_id'),
            prob:H.indexOf('problem'), flag:H.indexOf('problematic_task'),
            agree:H.indexOf('model_solution_agreement')};

  const HEAD=[...H,'is_exact_duplicate_id','matching_ids','is_near_duplicate','nearest_task_id','similarity'];
  const out=[];
  R.forEach(r=>{
    const tID=norm(r[ix.task]), pID=norm(r[ix.pid]);
    const rawMatches=[]; if(tID&&ids.has(tID)) rawMatches.push(tID);
    if(pID&&ids.has(pID)) rawMatches.push(pID);
    const matches=rawMatches.filter(m=>m!==tID&&m!==pID);
    const exact=matches.length>0;

    const t=tokens(r[ix.prob]);
    let best=0,bI=-1;
    tok.forEach((v,i)=>{const s=jacc(t,v); if(s>best){best=s;bI=i;}});
    let near=false, nearest='', sim=best;
    if(best>=CFG.SIM_THRESHOLD){
      nearest=corpus[bI].id1;
      if(nearest!==tID) near=true;
    }
    out.push([...r, exact, matches.join(','), near, near?nearest:'', sim.toFixed(3)]);
  });

  overwriteSheet(ss,CFG.CLEANED_SHEET,HEAD,out);

  /* partition */
  const iEx=HEAD.indexOf('is_exact_duplicate_id'),
        iNr=HEAD.indexOf('is_near_duplicate'),
        iFl=HEAD.indexOf('problematic_task'),
        iAg=HEAD.indexOf('model_solution_agreement');
  const OK='No issues with task!';
  const audit=[], soln=[], hold=[];
  out.forEach(r=>{
    const dup=truthy(r[iEx])||truthy(r[iNr]);
    const good=String(r[iFl]).trim()===OK || String(r[iFl]).trim()==='';
    const agree=String(r[iAg]).trim()==='Yes';
    if(good&&!dup&&agree) audit.push(r);
    else if(good&&!dup)   soln.push(r);
    else                  hold.push(r);
  });

  writeRaw(ss,CFG.AUDIT_RAW_SHEET,HEAD,audit);
  ensureAuditView(ss,HEAD);
  overwriteSheet(ss,CFG.SOLN_SHEET,HEAD,soln);
  overwriteSheet(ss,CFG.HOLD_SHEET,HEAD,hold);
}
function syncOverrides(){ /* same as v 7.2 – unchanged */ }

/* --- ensureAuditView (restored) --- */
function ensureAuditView(ss,HEAD){
  const n=HEAD.length;
  const view=ss.getSheetByName(CFG.AUDIT_VIEW_SHEET)||ss.insertSheet(CFG.AUDIT_VIEW_SHEET);
  view.showSheet();
  view.getRange(1,1,1,n).setValues([truncMat([HEAD])[0]]);
  if(view.getLastRow()>1) view.getRange(2,1,view.getLastRow()-1,25).clearContent(); // A-Y
  const esc=CFG.AUDIT_RAW_SHEET.replace(/'/g,"''");
  view.getRange('A2').setFormula(`=FILTER('${esc}'!A2:${String.fromCharCode(64+n)},LEN('${esc}'!A2:A))`);
  view.setFrozenRows(1);
}

/* ═════ PIPELINE 2 — APPROVED & COMPLETED SOLUTIONS ═════ */
function runSolutions(){
  refreshConnectedData();
  cleanApprovedCompletedSolutions();
  purgeBlankRows(CFG.SOL_AUDIT_SHEET);
  syncSolutionsOverrides();
  SpreadsheetApp.getUi().alert('✅ Approved & Completed Solutions pipeline complete!');
}
function cleanApprovedCompletedSolutions(){
  const ss=SpreadsheetApp.getActive();
  const corpus=loadCorpus(ss.getSheetByName(CFG.SOL_ALL_SHEET),
                          'task_id','problem_id',CFG.TEXT_COL);
  const ids=new Set(corpus.flatMap(c=>[c.id1,c.id2]).filter(Boolean));
  const tok=corpus.map(c=>c.tok);

  const pSh=ss.getSheetByName(CFG.SOL_PENDING_SHEET);
  const V=pSh.getDataRange().getValues(), H=V[0], R=V.slice(1);
  const ix={task:H.indexOf('task_id'), pid:H.indexOf('problem_id'),
            ext:H.indexOf('extracted_problem'), sol:H.indexOf('annotator_solution'),
            cor:H.indexOf('corrected_problem'), flag:H.indexOf('problematic_task')};

  const HEAD=[...H,'is_exact_duplicate_id','matching_ids','is_near_duplicate','nearest_task_id','similarity'];
  const out=[];
  R.forEach(r=>{
    const tID=norm(r[ix.task]), pID=norm(r[ix.pid]);
    const rawMatches=[]; if(tID&&ids.has(tID)) rawMatches.push(tID);
    if(pID&&ids.has(pID)) rawMatches.push(pID);
    const matches=rawMatches.filter(m=>m!==tID&&m!==pID);
    const exact=matches.length>0;

    const t=tokens(r[ix.ext]);
    let best=0,bI=-1;
    tok.forEach((v,i)=>{const s=jacc(t,v); if(s>best){best=s;bI=i;}});
    let near=false, nearest='', sim=best;
    if(best>=CFG.SIM_THRESHOLD){
      nearest=corpus[bI].id1;
      if(nearest!==tID) near=true;
    }
    out.push([...r, exact, matches.join(','), near, near?nearest:'', sim.toFixed(3)]);
  });

  overwriteSheet(ss,CFG.SOL_CLEANED_SHEET,HEAD,out);

  /* partition */
  const iEx=HEAD.indexOf('is_exact_duplicate_id'),
        iNr=HEAD.indexOf('is_near_duplicate'),
        iFl=HEAD.indexOf('problematic_task');
  const OK="No issues with problem! I will solve this problem like usual.";

  const AUD=[...HEAD,'task_id_copy','corrected_problem','annotator_solution'];
  const audit=[], pause=[];
  out.forEach(r=>{
    const dup=truthy(r[iEx])||truthy(r[iNr]);
    const good=String(r[iFl]).trim()===OK || String(r[iFl]).trim()==='';
    if(!dup&&good){
      audit.push([...r,
        trunc(r[ix.task]),
        trunc((r[ix.cor]&&String(r[ix.cor]).trim().toUpperCase()!=='N/A')?r[ix.cor]:r[ix.ext]),
        trunc(r[ix.sol])
      ]);
    } else pause.push(r);
  });

  overwriteSheet(ss,CFG.SOL_AUDIT_SHEET,AUD,audit);
  overwriteSheet(ss,CFG.SOL_PAUSE_SHEET,HEAD,pause);
}

/* syncSolutionsOverrides — version from v 7.2 (column H → W) */
function syncSolutionsOverrides(){
  const sh=SpreadsheetApp.getActive().getSheetByName(CFG.SOL_AUDIT_SHEET);
  if(!sh) return;
  const n=sh.getLastRow()-1; if(n<1) return;

  const old=sh.getRange(2,21,n,6).getValues();
  const map=new Map(); old.forEach(r=>{const k=String(r[0]).trim(); if(k) map.set(k,r);});

  const id=sh.getRange(2,1,n).getValues(),
        ep=sh.getRange(2,3,n).getValues(),
        colH=sh.getRange(2,8,n).getValues(),
        cp=sh.getRange(2,10,n).getValues();

  const blk=[];
  for(let i=0;i<n;i++){
    const key=String(id[i][0]).trim();
    const prev=map.get(key)||Array(6).fill('');
    blk.push([
      trunc(key),
      trunc(prev[1]||(cp[i][0]&&String(cp[i][0]).trim().toUpperCase()!=='N/A'?cp[i][0]:ep[i][0])),
      trunc(prev[2]||colH[i][0]),
      prev[3]||'', prev[4]||'', prev[5]||''
    ]);
  }
  sh.getRange(2,21,n,6).setValues(blk);
}

/* ═════ onEdit checkbox → full name ═════ */
function onEdit(e){
  const cfg={
    'Completed Extractions -> Audit for delivery':{ cb:30, name:31 },
    'Clean Solutions Audit':                       { cb:24, name:26 }
  }[e.range.getSheet().getName()];
  if(!cfg||e.range.getColumn()!==cfg.cb||!e.range.isChecked()) return;
  const local=e.user.email.split('@')[0];
  const full=local.includes('.')?local.split('.').map(cap).join(' '):cap(local);
  e.range.getSheet().getRange(e.range.getRow(),cfg.name).setValue(full);
}
